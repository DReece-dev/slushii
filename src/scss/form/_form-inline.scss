@use "sass:map";
@use "sass:string"; // 1. IMPORT the string module

$prefix: "form-inline" !default;

// --- Expanded Configuration Map ---
$config: (
    // Spacing
    "gap-x": 1rem,
    "gap-y": 0.5rem,
    "gap-xs": 0.25rem,
    "gap-sm": 0.5rem,
    "gap-lg": 1.5rem,
    "gap-xl": 2rem,

    // Breakpoints for responsive variants
    "breakpoint-sm": "576px",
    "breakpoint-md": "768px",
    "breakpoint-lg": "992px",
    "breakpoint-xl": "1200px",

    // Visuals
    "divider-color": #dee2e6,
    "dark-divider-color": #495057,
    "panel-bg": #ffffff,
    "panel-border-color": #dee2e6,
    "dark-panel-bg": #374151,
    "dark-panel-border-color": #495057
) !default;

// --- Base Component ---
.#{$prefix} {
    // Generate CSS Custom Properties from the config map
    @each $key, $value in $config {
        --#{$prefix}-#{$key}: #{$value};
    }

    display: flex;
    flex-flow: row wrap;
    align-items: center;
    gap: var(--#{$prefix}-gap-y) var(--#{$prefix}-gap-x);

    // Default behavior for direct descendant form elements
    > .form-control,
    > .form-select,
    > .btn,
    > .input-group {
        flex: 1 1 auto;
        width: auto; // Allow inputs to shrink or grow as needed
    }

    > .form-check,
    > label {
        width: auto; // Prevent checkboxes and labels from taking full width
        flex-shrink: 0; // Prevent labels from shrinking
    }
}

// =============================================================================
// --- EXPANDED VARIANTS (25+) ---
// =============================================================================

// --- Spacing Variants (8) ---
.#{$prefix}--no-gap {
    --#{$prefix}-gap-x: 0;
    --#{$prefix}-gap-y: 0;
}
.#{$prefix}--gap-xs {
    --#{$prefix}-gap-x: var(--#{$prefix}-gap-xs);
    --#{$prefix}-gap-y: calc(var(--#{$prefix}-gap-xs) / 2);
}
.#{$prefix}--gap-sm {
    --#{$prefix}-gap-x: var(--#{$prefix}-gap-sm);
    --#{$prefix}-gap-y: calc(var(--#{$prefix}-gap-sm) / 2);
}
.#{$prefix}--gap-lg {
    --#{$prefix}-gap-x: var(--#{$prefix}-gap-lg);
    --#{$prefix}-gap-y: calc(var(--#{$prefix}-gap-lg) / 2);
}
.#{$prefix}--gap-xl {
    --#{$prefix}-gap-x: var(--#{$prefix}-gap-xl);
    --#{$prefix}-gap-y: calc(var(--#{$prefix}-gap-xl) / 2);
}
.#{$prefix}--gap-x-0 {
    --#{$prefix}-gap-x: 0;
}
.#{$prefix}--gap-y-0 {
    --#{$prefix}-gap-y: 0;
}
.#{$prefix}--auto-width > * {
    flex: 0 1 auto;
} // Elements only take up their content's width

// --- Alignment Variants (7) ---
.#{$prefix}--start {
    justify-content: flex-start;
}
.#{$prefix}--end {
    justify-content: flex-end;
}
.#{$prefix}--center {
    justify-content: center;
}
.#{$prefix}--between {
    justify-content: space-between;
}
.#{$prefix}--align-start {
    align-items: flex-start;
}
.#{$prefix}--align-end {
    align-items: flex-end;
}
.#{$prefix}--align-stretch {
    align-items: stretch;
}

// --- Layout & Wrapping Variants (2) ---
.#{$prefix}--no-wrap {
    flex-wrap: nowrap;
    overflow-x: auto;
}
.#{$prefix}--full-width > * {
    flex-basis: 100%;
}

// --- Structural & Grouping Variants (2) ---
// Groups child elements together like a button group
.#{$prefix}--attached {
    gap: 0;
    > .form-control,
    > .form-select,
    > .btn,
    > .input-group {
        border-radius: 0;
        &:not(:first-child) {
            margin-left: calc(var(--form-control-border-width, 1px) * -1);
        }
        &:focus-visible {
            z-index: 1;
        }
    }
    > :first-child {
        border-top-left-radius: var(--form-control-border-radius, 0.375rem);
        border-bottom-left-radius: var(--form-control-border-radius, 0.375rem);
    }
    > :last-child {
        border-top-right-radius: var(--form-control-border-radius, 0.375rem);
        border-bottom-right-radius: var(--form-control-border-radius, 0.375rem);
    }
}

// --- Visual Style Variants (4) ---
// Adds horizontal dividers between elements
.#{$prefix}--h-divided > :not(:last-child) {
    border-right: 1px solid var(--#{$prefix}-divider-color);
    padding-right: var(--#{$prefix}-gap-x);
}
// Adds vertical dividers (for stacked layouts)
.#{$prefix}--v-divided > :not(:last-child) {
    border-bottom: 1px solid var(--#{$prefix}-divider-color);
    padding-bottom: var(--#{$prefix}-gap-y);
}
// Makes the inline form look like a panel
.#{$prefix}--panel {
    background-color: var(--#{$prefix}-panel-bg);
    border: 1px solid var(--#{$prefix}-panel-border-color);
    padding: var(--#{$prefix}-gap-lg);
    border-radius: 0.5rem;
}
// Dashed style for dividers
.#{$prefix}--divided-dashed {
    border-style: dashed;
}

// --- Responsive Stacking (Mobile-First Approach) ---
// Stacks elements by default and becomes inline at the specified breakpoint
.#{$prefix}--stacked {
    flex-direction: column;
    align-items: stretch;

    > .form-control,
    > .form-select,
    > .btn,
    > .input-group,
    > .form-check {
        width: 100%;
    }
}
@media (min-width: map.get($config, "breakpoint-sm")) {
    .#{$prefix}--stacked-sm {
        flex-direction: row;
        align-items: center;
        > * {
            width: auto;
        }
    }
}
@media (min-width: map.get($config, "breakpoint-md")) {
    .#{$prefix}--stacked-md {
        flex-direction: row;
        align-items: center;
        > * {
            width: auto;
        }
    }
}

// --- Advanced Responsive Grid System ---
// Use this for complex, multi-column layouts.
.#{$prefix}--grid {
    display: grid;
    --#{$prefix}-cols: 1; // Default to a single column
    grid-template-columns: repeat(var(--#{$prefix}-cols), minmax(0, 1fr));

    // Responsive column variants
    @each $bp, $width in $config {
        // 2. FIX: Use string.slice with 1-based indexing
        @if string.slice($bp, 1, 10) == "breakpoint" {
            $bp-name: string.slice($bp, 12);
            @media (min-width: #{$width}) {
                @for $i from 1 through 6 {
                    &.#{$prefix}--cols-#{$bp-name}-#{$i} {
                        --#{$prefix}-cols: #{$i};
                    }
                }
            }
        }
    }
}

// --- Dark Mode Theming ---
.dark .#{$prefix} {
    &--h-divided > :not(:last-child),
    &--v-divided > :not(:last-child) {
        border-color: var(--#{$prefix}-dark-divider-color);
    }
    &--panel {
        background-color: var(--#{$prefix}-dark-panel-bg);
        border-color: var(--#{$prefix}-dark-panel-border-color);
    }
}
