@use "sass:map";

$collapse-prefix: "collapse" !default;
$accordion-prefix: "accordion" !default;

$collapse-sizes: (
    "sm": (
        "font-size": 0.875rem,
        "padding": 0.75rem 1rem,
        "icon-size": 0.8em,
    ),
    "md": (
        "font-size": 1rem,
        "padding": 1rem 1.25rem,
        "icon-size": 1em,
    ),
    "lg": (
        "font-size": 1.125rem,
        "padding": 1.25rem 1.5rem,
        "icon-size": 1.1em,
    ),
) !default;

.#{$collapse-prefix} {
    // CSS variables for complete control.
    --collapse-font-size: #{map.get($collapse-sizes, "md", "font-size")};
    --collapse-padding: #{map.get($collapse-sizes, "md", "padding")};
    --collapse-icon-size: #{map.get($collapse-sizes, "md", "icon-size")};
    --collapse-bg: var(--white, #ffffff);
    --collapse-fg: var(--gray-800, #1f2937);
    --collapse-border-color: var(--gray-200, #e5e7eb);
    --collapse-radius: 0.5rem;

    font-size: var(--collapse-font-size);
    background-color: var(--collapse-bg);
    border: 1px solid var(--collapse-border-color);
    border-radius: var(--collapse-radius);

    // Smoothly reveal the content
    &[open] {
        & > .#{$collapse-prefix}__trigger {
            border-bottom: 1px solid var(--collapse-border-color);
        }
        // Don't round the bottom corners of the trigger when open
        .#{$collapse-prefix}__trigger {
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;
        }
    }

    // BEM: Trigger (<summary> element)
    &__trigger {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
        padding: var(--collapse-padding);
        color: var(--collapse-fg);
        font-weight: 500;
        cursor: pointer;
        list-style: none; // Remove the default disclosure triangle
        border-radius: inherit; // Inherit radius from parent
        transition: border-radius 0.1s ease;

        &::-webkit-details-marker {
            display: none;
        }

        // Pure CSS, themeable, and animatable chevron icon
        &::after {
            content: ">";
            display: inline-block;
            font-size: var(--collapse-icon-size);
            font-weight: bold;
            color: var(--gray-400, #9ca3af);
            transform: rotate(90deg);
            transition: transform 0.2s ease;
        }
    }
    // Animate the icon when the panel is closed
    &:not([open]) > &__trigger::after {
        transform: rotate(0deg);
    }

    // BEM: Content (wrapper for the content)
    &__content {
        padding: var(--collapse-padding);
    }
}

.#{$accordion-prefix} {
    display: flex;
    flex-direction: column;

    // Key improvement: Joined appearance for items inside an accordion
    &--joined {
        > .#{$collapse-prefix} {
            border-radius: 0;
            border-bottom-width: 0;
            border-top: none;
        }
        > .#{$collapse-prefix}:first-child {
            border-top: 1px solid var(--collapse-border-color);
            border-top-left-radius: var(--collapse-radius, 0.5rem);
            border-top-right-radius: var(--collapse-radius, 0.5rem);
        }
        > .#{$collapse-prefix}:last-child {
            border-bottom-width: 1px;
            border-bottom-left-radius: var(--collapse-radius, 0.5rem);
            border-bottom-right-radius: var(--collapse-radius, 0.5rem);
        }
        > .#{$collapse-prefix}[open]:not(:last-child) {
            border-bottom-width: 1px;
        }
    }

    // Spaced appearance for items inside an accordion
    &--spaced {
        gap: 1rem;
        > .#{$collapse-prefix} {
            border: 1px solid var(--collapse-border-color);
        }
    }
}

// Generate size variants
@each $name, $props in $collapse-sizes {
    .#{$collapse-prefix}--#{$name} {
        --collapse-font-size: #{map.get($props, "font-size")};
        --collapse-padding: #{map.get($props, "padding")};
        --collapse-icon-size: #{map.get($props, "icon-size")};
    }
}

// Style modifier: Plus/Minus icon
.#{$collapse-prefix}--plus-icon {
    & > &__trigger::after {
        content: "+";
        transform: rotate(0deg);
    }
    &[open] > &__trigger::after {
        transform: rotate(45deg);
    }
}
